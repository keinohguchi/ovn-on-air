---
- name: setup fake VMs on chassis
  hosts: chassis
  gather_facts: no
  become: yes
  tasks:
    - name: add new name space to simulate the VMs
      command: ip netns add {{ item }}
      with_items:
        - "{{ guest1.namespace }}"
        - "{{ guest2.namespace }}"
        - "{{ guest3.namespace }}"
      register: result
      changed_when: "result.rc == 0"
      failed_when: "result.rc != 0 and 'File exists' not in result.stderr"

    - name: create the OvS internal port through ovs-vsctl
      openvswitch_port:
        bridge: br-int
        port: "{{ item }}"
        set: Interface "{{ item }}" type=internal
      with_items:
        - "{{ guest1.port }}"
        - "{{ guest2.port }}"
        - "{{ guest3.port }}"

    - name: move those port to the appropriate name space
      command: ip link set {{ item.port }} netns {{ item.namespace }}
      with_items:
        - { port: "{{ guest1.port }}", namespace: "{{ guest1.namespace }}" }
        - { port: "{{ guest2.port }}", namespace: "{{ guest2.namespace }}" }
        - { port: "{{ guest3.port }}", namespace: "{{ guest3.namespace }}" }
      register: result
      changed_when: "result.rc == 0"
      failed_when: "result.rc != 0 and 'Cannot find device' not in result.stderr"

    - name: setup MAC address on those ports
      command: ip netns exec {{ item.namespace }} ip link set {{ item.port }} address {{ item.mac }}
      with_items:
        - { namespace: "{{ guest1.namespace }}", port: "{{ guest1.port }}", mac: "{{ guest1.mac }}" }
        - { namespace: "{{ guest2.namespace }}", port: "{{ guest2.port }}", mac: "{{ guest2.mac }}" }
        - { namespace: "{{ guest3.namespace }}", port: "{{ guest3.port }}", mac: "{{ guest3.mac }}" }

    - name: setup IP address on those ports
      command: ip netns exec {{ item.namespace }} ip address add {{ item.ip }} dev {{ item.port }}
      with_items:
        - { namespace: "{{ guest1.namespace }}", port: "{{ guest1.port }}", ip: "{{ guest1.ip }}" }
        - { namespace: "{{ guest2.namespace }}", port: "{{ guest2.port }}", ip: "{{ guest2.ip }}" }
        - { namespace: "{{ guest3.namespace }}", port: "{{ guest3.port }}", ip: "{{ guest3.ip }}" }
      register: result
      changed_when: "result.rc == 0"
      failed_when: "result.rc != 0 and 'RTNETLINK answers: File exists' not in result.stderr"

    - name: set the link up
      command: ip netns exec {{ item.namespace }} ip link set {{ item.port }} up
      with_items:
        - { namespace: "{{ guest1.namespace }}", port: "{{ guest1.port }}" }
        - { namespace: "{{ guest2.namespace }}", port: "{{ guest2.port }}" }
        - { namespace: "{{ guest3.namespace }}", port: "{{ guest3.port }}" }
